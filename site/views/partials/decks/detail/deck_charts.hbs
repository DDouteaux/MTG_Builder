<div class="container">
    <div class="row">
        <div class="col-6">
            <div class="card" style="max-width: 300px">
                <div class="card-header">Courbe de mana<div class="show-hide-card" data-show-id='svgCmc'><i class="fas fa-chevron-down"></i><i class="fas fa-chevron-up" style="display:none"></i></div><div id="filter-cmc" class="has-filter" style="display: none"><i class="fas fa-filter"></i></div></div>
                <div class="card-body" id="svgCmc"></div>
            </div>
            <div class="mt-3"></div>
            <div class="card" style="max-width: 300px">
                <div class="card-header">Sous-types des cartes<div class="show-hide-card" data-show-id='svgSubTypes'><i class="fas fa-chevron-down"></i><i class="fas fa-chevron-up" style="display:none"></i></div><div id="filter-trois" class="has-filter" style="display: none"><i class="fas fa-filter"></i></div></div>
                <div class="card-body" id="svgSubTypes"></div>
            </div>
        </div>

        <div class="col-6">
            <div class="card" style="max-width: 300px">
                <div class="card-header">Types de cartes<div class="show-hide-card" data-show-id='svgTypes'><i class="fas fa-chevron-down"></i><i class="fas fa-chevron-up" style="display:none"></i></div><div id="filter-types" class="has-filter" style="display: none"><i class="fas fa-filter"></i></div></div>
                <div class="card-body" id="svgTypes"></div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(() => {
        $('.show-hide-card').on('click', (event) => {
            referer = $(event.currentTarget);
            referer.find('i').toggle();
            $('#' + referer.data('show-id')).toggle();
        });
    });

    const allCards = $('.deck-card').toArray().map(div => div.id);
    var filters = [];
    var hiddenCards = []

    function updateFilters(data, event, purpose) {
        // Récupérer la liste des identifiants à afficher
        try {
            ids = data.map(entry => entry.id + "-removable");
        } catch(exception) {
            ids = data.ids.map(entry => entry + "-removable");
        }

        // Les cartes misent en avant par ce filtre
        idsToShow = new RegExp('^(' + ids.join('|') + ')$');

        // Les cartes cachées par ce filtre
        hiddenByFilter = $('.deck-card').filter(function() {
            return !this.id.match(idsToShow)
        })

        // Les identifiants associés au filtre choisi
        filterClassId = $(event.target).closest('.card-body').attr('id');
        filterId = $(event.target).attr('id');

        // Si event != null on vient de sélectionner une colonne, sinon on survole
        if (purpose === "select") {
            closestHasFilter = $($(event.target).closest('.card').find('.has-filter')[0]);
            filtersKeys = Object.keys(filters);

            if (!filtersKeys.includes(filterClassId)) {
                // Premier filtre sur ce graphe
                filters[filterClassId] = {};
            }

            filterOfClassId = filters[filterClassId];

            if (!Object.keys(filterOfClassId).includes(filterId)) {
                // On sélectionne la colonne
                filterOfClassId[filterId] = {
                    hiddenCards: hiddenByFilter,
                    selectedCards: ids
                }
                $('#' + filterId).addClass('graph-bar-selected');
                closestHasFilter.show();
                $('#has-filter-global').show();
            } else {
                // On déselectionne la colonne
                delete filterOfClassId[filterId];
                if (Object.keys(filterOfClassId).length == 0) {
                    delete filters[filterClassId];
                    closestHasFilter.hide();

                    filtersKeys = Object.keys(filters);
                    if (filtersKeys.length == 0 || 
                       (filtersKeys.length == 1 && filtersKeys[0] === 'hover')) {
                        $('#has-filter-global').hide();
                    }
                }
                $('#' + filterId).removeClass('graph-bar-selected');
            }
        } else {
            if (Object.keys(filters).includes('hover')) {
                delete filters['hover'];
            } else {
                filters['hover'] = {
                    hiddenCards: hiddenByFilter,
                    selectedCards: ids,
                    filterId: filterId,
                    filterClassId: filterClassId
                }
            }
        }
        updateAllDisplay();
        return;
    }

    function updateAllDisplay() {
        selectedCards = allCards
        if (typeof filters['hover'] != 'undefined') {
            hoverClassFilterId = filters['hover'].filterClassId
            hoverFilterId = filters['hover'].filterId
            hoverIsUsable = true;
        } else {
            hoverIsUsable = false;
        }


        for (let filterClassId in filters) {
            if (filterClassId === 'hover') {
                continue
            }
            selectedByFilter = []
            for(let filterId in filters[filterClassId]) {
                selectedByFilter = selectedByFilter.concat(filters[filterClassId][filterId].selectedCards);
            }

            if (hoverIsUsable && filterClassId === hoverClassFilterId) {
                if (Object.keys(filters[filterClassId]).includes(hoverFilterId)) {
                    selectedByFilter = selectedByFilter.filter(card => filters['hover'].selectedCards.includes(card));
                } else {
                    selectedByFilter = selectedByFilter.concat(filters['hover'].selectedCards);
                }
                hoverIsUsable = false;
            }

            selectedCards = selectedCards.filter(card => selectedByFilter.includes(card));
        }

        if (hoverIsUsable) {
            selectedCards = selectedCards.filter(card => filters['hover'].selectedCards.includes(card));
        }

        $('.deck-card').map(function() {
            if (selectedCards.includes(this.id)) {
                $(this).show();
            } else {
                $(this).hide();
            }
        });
    }
</script>

<script>
    function initDiscreteHistogram(data, sortByValue, sortByKey, margin, width, height, divId, displayKey, valueKey) {
        count = 0;
        data.map(function(d) {
            d.colId = count;
            count += 1;
        })

        width = width - margin.left - margin.right,
        height = height - margin.top - margin.bottom;

        if (sortByValue) {
            data.sort(function(a, b) {
                return b[valueKey] - a[valueKey];
            });
        }

        if (sortByKey) {
            data.sort(function(a, b) {
                return a[displayKey] - b[displayKey];
            });
        }

        // Création de l'objet SVG
        var svg = d3.select("#" + divId)
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g");

        // Échelle de l'axe X puis mise en place de ce dernier
        xMin = 0;
        xMax = width;
        xValues = data.map(d => d[displayKey])

        if (xValues.reduce((acc, val) => { return acc && !isNaN(parseInt(val))}, true)) {
            xValues = [...Array(d3.max(data, d => d[displayKey]) + 1).keys()];
        }

        var x = d3.scaleBand()
                    .domain(xValues)
                    .rangeRound([xMin, xMax])

        svg.append("g")
            .attr("transform", `translate(${margin.left},${height + margin.top})`)
            .call(d3.axisBottom(x))
                .selectAll("text")
                    .style("text-anchor", "end")
                    .attr("dx", "-.8em")
                    .attr("dy", ".15em")
                    .attr("transform", "rotate(-65)");

        // Préparation de l'axe y
        yMax = d3.max(data, d => d[valueKey])

        y = d3.scaleLinear()
                .domain([0, yMax])
                .range([height, 0])
        
        svg.append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`)
            .call(d3.axisLeft(y));

        // Dessin des rectangles de valeurs de l'histogramme
        svg.selectAll("rect")
            .data(data)
            .enter()
            .append("rect")
                .attr("x", function(d) { return 1 + margin.left + x(d[displayKey]);})
                .attr("y", 1)
                .attr("transform", function(d) { return `translate(0, ${height + margin.top -d[valueKey]*height/yMax - 1})` })
                .attr("width", function(d) { return x.bandwidth() - 1; })
                .attr("height", function(d) { return d[valueKey]*height/yMax; })
                .attr("class", "graph-types-bar")
                .attr("class", "graph-bar")
                .attr("id", function(d) { return divId + d.colId})
                .on("mouseenter", function(d) { updateFilters(d, event, "hover") })
                .on("mouseleave", function(d) { updateFilters(d, event, "hover") })
                .on("click", function(d) { updateFilters(d, event, "select") })
    }
</script>

<script>
    var dataTypes = JSON.parse('{{{stringifyIt (getHistogramCardTypes cards)}}}')
    dataTypes = dataTypes.reduce((acc, value) => {
        to_update = acc.filter(a => a.cardType === value.cardType);
        if (to_update.length > 0) {
            to_update[0].count += value.count;
            to_update[0].ids.push(value.id);
        } else {
            acc.push({ cardType: value.cardType, count: value.count, ids: [value.id] });
        }
        return acc;
    }, [])

    initDiscreteHistogram(dataTypes, true, false, {top: 10, right: 10, bottom: 70, left: 20},
                            260, 250, "svgTypes", "cardType", "count");

    initDiscreteHistogram(JSON.parse('{{{stringifyIt (getHistogramCardSubTypes cards)}}}'),
                            true, false, {top: 10, right: 10, bottom: 70, left: 20},
                            260, 250, "svgSubTypes", "cardSubType", "count");

    var dataCmc = JSON.parse('{{{stringifyIt (getHistogramFromCards cards)}}}')
    dataCmc = dataCmc.reduce((acc, value) => {
        to_update = acc.filter(a => a.cmc === value.cmc);
        if (to_update.length > 0) {
            to_update[0].count += value.count;
            to_update[0].ids.push(value.id);
        } else {
            acc.push({ cmc: value.cmc, count: value.count, ids: [value.id] });
        }
        return acc;
    }, [])
    initDiscreteHistogram(dataCmc, false, true, {top: 10, right: 10, bottom: 20, left: 20},
                            260, 250, "svgCmc", "cmc", "count");


</script>