<div class="container">
    <div class="row">
        <div class="col-6">
            <div class="card" style="max-width: 300px">
                <div class="card-header">Courbe de mana<div class="show-hide-card" data-show-id='svgCmc'><i class="fas fa-chevron-down"></i><i class="fas fa-chevron-up" style="display:none"></i></div><div id="filter-cmc" class="has-filter" style="display: none"><i class="fas fa-filter"></i></div></div>
                <div class="card-body" id="svgCmc"></div>
            </div>
            <div class="mt-3"></div>
            <div class="card" style="max-width: 300px">
                <div class="card-header">Sous-types des cartes<div class="show-hide-card" data-show-id='svgSubTypes'><i class="fas fa-chevron-down"></i><i class="fas fa-chevron-up" style="display:none"></i></div><div id="filter-trois" class="has-filter" style="display: none"><i class="fas fa-filter"></i></div></div>
                <div class="card-body" id="svgSubTypes"></div>
            </div>
        </div>

        <div class="col-6">
            <div class="card" style="max-width: 300px">
                <div class="card-header">Types de cartes<div class="show-hide-card" data-show-id='svgTypes'><i class="fas fa-chevron-down"></i><i class="fas fa-chevron-up" style="display:none"></i></div><div id="filter-types" class="has-filter" style="display: none"><i class="fas fa-filter"></i></div></div>
                <div class="card-body" id="svgTypes"></div>
            </div>
        </div>
    </div>
</div>

<script>
    $(document).ready(() => {
        $('.show-hide-card').on('click', (event) => {
            referer = $(event.currentTarget);
            referer.find('i').toggle();
            $('#' + referer.data('show-id')).toggle();
        });
    });

    var doNotShowDivs = [];
    var filters = [];

    function filterCardsOnHover(data) {
        try {
            ids = data.map(entry => entry.id);
        } catch(exception) {
            ids = data.ids
        }
        
        idsFromMatch = new RegExp('^(' + ids.join('|') + ')-removable$');
        $('.deck-card').filter(function() {
            return !this.id.match(idsFromMatch)
        }).hide();
    }

    function displayAllDeckCards() {
        $('.deck-card').filter(function() {
            return !doNotShowDivs.includes(this.id);
        }).show();
    }

    function selectColumn(data, event) {
        try {
            ids = data.map(entry => entry.id);
        } catch(exception) {
            ids = data.ids
        }

        idsToShow = new RegExp('^(' + ids.join('|') + ')-removable$');
        idsToNotShow = []

        doNotShowUntilDeselect = $('.deck-card').filter(function() {
            return !this.id.match(idsToShow)
        }).map(function() {
            if ($(event.target).attr('class').includes('graph-bar-selected')) {
                doNotShowDivs.splice(doNotShowDivs.indexOf(this.id), 1);
            } else {
                doNotShowDivs.push(this.id);
            }
        });

        closestHasFilter = $(event.target).closest('.card').find('.has-filter')[0];

        if ($(event.target).attr('class').includes('graph-bar-selected')) {
            $(event.target).removeClass('graph-bar-selected')
            displayAllDeckCards();
            filters.splice(filters.indexOf(closestHasFilter.id, 1));
            if (filters.indexOf(closestHasFilter.id) < 0) {
                $(closestHasFilter).hide();
            }
            if (filters.length == 0) {
                $('#has-filter-global').hide();
            }
        } else {
            $(event.target).addClass('graph-bar-selected');
            doNotShowUntilDeselect.hide();
            filters.push(closestHasFilter.id)
            $(closestHasFilter).show();
            $('#has-filter-global').show();
        }
    }
</script>

<script>
    function initDiscreteHistogram(data, sortByValue, sortByKey, margin, width, height, divId, displayKey, valueKey) {
        width = width - margin.left - margin.right,
        height = height - margin.top - margin.bottom;

        if (sortByValue) {
            data.sort(function(a, b) {
                return b[valueKey] - a[valueKey];
            });
        }

        if (sortByKey) {
            data.sort(function(a, b) {
                return a[displayKey] - b[displayKey];
            });
        }

        // Création de l'objet SVG
        var svg = d3.select("#" + divId)
                    .append("svg")
                    .attr("width", width + margin.left + margin.right)
                    .attr("height", height + margin.top + margin.bottom)
                    .append("g");

        // Échelle de l'axe X puis mise en place de ce dernier
        xMin = 0;
        xMax = width;
        xValues = data.map(d => d[displayKey])
        var x = d3.scaleBand()
                    .domain(xValues)
                    .rangeRound([xMin, xMax])

        svg.append("g")
            .attr("transform", `translate(${margin.left},${height + margin.top})`)
            .call(d3.axisBottom(x))
                .selectAll("text")
                    .style("text-anchor", "end")
                    .attr("dx", "-.8em")
                    .attr("dy", ".15em")
                    .attr("transform", "rotate(-65)");

        // Préparation de l'axe y
        yMax = d3.max(data, d => d[valueKey])

        y = d3.scaleLinear()
                .domain([0, yMax])
                .range([height, 0])
        
        svg.append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`)
            .call(d3.axisLeft(y));

        // Dessin des rectangles de valeurs de l'histogramme
        svg.selectAll("rect")
            .data(data)
            .enter()
            .append("rect")
                .attr("x", function(d) { return 1 + margin.left + x(d[displayKey]);})
                .attr("y", 1)
                .attr("transform", function(d) { return `translate(0, ${height + margin.top -d[valueKey]*height/yMax - 1})` })
                .attr("width", function(d) { return x.bandwidth() - 1; })
                .attr("height", function(d) { return d[valueKey]*height/yMax; })
                .attr("class", "graph-types-bar")
                .attr("class", "graph-bar")
                .on("mouseenter", function(d) { filterCardsOnHover(d) })
                .on("mouseleave", function(d) { displayAllDeckCards(d) })
                .on("click", function(d) { selectColumn(d, event) })
    }
</script>

<script>
    var dataTypes = JSON.parse('{{{stringifyIt (getHistogramCardTypes cards)}}}')
    dataTypes = dataTypes.reduce((acc, value) => {
        to_update = acc.filter(a => a.cardType === value.cardType);
        if (to_update.length > 0) {
            to_update[0].count += value.count;
            to_update[0].ids.push(value.id);
        } else {
            acc.push({ cardType: value.cardType, count: value.count, ids: [value.id] });
        }
        return acc;
    }, [])

    initDiscreteHistogram(dataTypes, true, false, {top: 10, right: 10, bottom: 70, left: 20},
                            260, 250, "svgTypes", "cardType", "count");

    initDiscreteHistogram(JSON.parse('{{{stringifyIt (getHistogramCardSubTypes cards)}}}'),
                            true, false, {top: 10, right: 10, bottom: 70, left: 20},
                            260, 250, "svgSubTypes", "cardSubType", "count");

    var dataCmc = JSON.parse('{{{stringifyIt (getHistogramFromCards cards)}}}')
    dataCmc = dataCmc.reduce((acc, value) => {
        to_update = acc.filter(a => a.cmc === value.cmc);
        if (to_update.length > 0) {
            to_update[0].count += value.count;
            to_update[0].ids.push(value.id);
        } else {
            acc.push({ cmc: value.cmc, count: value.count, ids: [value.id] });
        }
        return acc;
    }, [])
    initDiscreteHistogram(dataCmc, false, true, {top: 10, right: 10, bottom: 20, left: 20},
                            260, 250, "svgCmc", "cmc", "count");


</script>